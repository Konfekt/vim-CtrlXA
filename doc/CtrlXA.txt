          CtrlXA, option toggling by Ctrl-X/A *CtrlXA* *ctrlxa*

===========================================================================
0. Introduction ~

This plug-in makes the key bindings |CTRL-X| and |CTRL-A| (as well as
|v_g_CTRL-X| and |v_g_CTRL-A|) additionally cycle through keywords in lists
such as 'true/false', 'yes/no', 'yesterday/today/tomorrow', ...
or roman numerals 'I', 'II', 'III'...

Useful, for example,

- for toggling settings in a configuration file,
- for toggling language modifiers such as 'public/private',
- for switching between 'pick', 'squash', 'reword', ... a git commit when rebasing, ...

Repetition of the last command by hitting |.| in normal mode is achieved
by vim-repeat [1] and in visual mode by vim-visualrepeat [2].

[1]: https://github.com/tpope/vim-repeat
[2]: https://github.com/inkarkat/vim-visualrepeat

===========================================================================
1. Global Configuration ~

The keywords cycles are configurable by the global variable
*g:CtrlXA_Toggles* which is a long list of keyword lists in
`plugin/ctrlxa.vim`

If you want to add a cycle, say the pair `['sweet', 'bitter']`, to the
default list of cycles, then

- either put
>
    let g:CtrlXA_Toggles = [
        \ ['sweet', 'bitter'],
        \ ] + g:CtrlXA_Toggles
<

  into a file '~/.vim/after/plugin/CtrlXA.vim' on Linux (respectively
  '%USERPROFILE%\vimfiles\after\plugin\CtrlXA.vim' on Microsoft Windows), or
- put into your `vimrc` the lines
>
    augroup VimAfter
        autocmd!
        autocmd VimEnter let g:CtrlXA_Toggles = [
        \ ['sweet', 'bitter'],
        \ ] + g:CtrlXA_Toggles
    augroup END
<

If you prefer 'i', 'v' and 'I', 'V' to run through the letters of the Latin
alphabet instead of the Roman numerals, move these letters from the pair of
arrays containing the roman numerals to that containing the Latin alphabet.

Keywords consist of the keyword characters determined by the global variable
`g:CtrlXA_iskeyword`.
By default, this variable takes the same value as `&g:iskeyword` with the
exception of the underscore `_` which is removed from `g:CtrlXA_iskeyword`.

===========================================================================
2. Buffer-Local Configuration ~

There is also the buffer-local analogue *b:CtrlXA_Toggles*, which allows for
file-type specific keyword cycles by, for example

>
  autocmd FileType gitrebase |
  \ let b:CtrlXA_Toggles = [
    \ ['pick', 'fixup', 'squash', 'break', 'reword', 'edit', 'drop'],
    \ ] + get(b:, 'CtrlXA_Toggles', g:CtrlXA_Toggles)
<

This will

- include all keyword cycles of the global variable, and
- add (buffer-)local keyword cycles which have precedence over the global
  cycles.

To add keyword cycles for other file types, add

- either the four lines above to `~/.vimrc` on Linux or MacOS (respectively
  `%USERPROFILE%\_vimrc` on Microsoft Windows), or
- the last three lines above to `~/.vim/after/ftplugin/gitrebase.vim` on Linux
  (respectively `%USERPROFILE%\vimfiles\after\ftplugin\gitrebase.vim` on
   Microsoft Windows).

===========================================================================
3. FAQ ~

Q: Does this plugin integrate well with Tim Pope's vim-speeddating?
A: Yes, by adding to your `vimrc` the lines

>
  nmap <Plug>SpeedDatingFallbackUp   <Plug>(CtrlXA-CtrlA)
  nmap <Plug>SpeedDatingFallbackDown <Plug>(CtrlXA-CtrlX)
<

