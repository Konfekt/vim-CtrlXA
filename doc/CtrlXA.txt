          CtrlXA, option toggling by Ctrl-X/A *CtrlXA* *ctrlxa*

===========================================================================

This plug-in makes the key bindings `<Ctrl-X/A>` additionally cycle through
keywords in lists such as `true/false`, `yes/no`, `set/unset` or
`yesterday/today/tomorrow`.

These keywords cycles are configurable by the global variable
*g:CtrlXA_Toggles* which defaults to

>
  let g:CtrlXA_Toggles = [
      \ ['true', 'false'], ['True', 'False'], ['TRUE', 'FALSE'],
      \ ['yes', 'no'], ['Yes', 'No'], ['YES', 'NO'],
      \ ['on', 'off'], ['On', 'Off'], ['ON', 'OFF'],
      \ ['set', 'unset'],
      \ ['enable', 'disable'],
      \ ['is', 'isnot'] ,
      \ ['==', '!='] , ['<', '>'], ['<=', '>='], ['=~', '!~'],
      \ ['up', 'down'], ['Up', 'Down'] ,['UP', 'DOWN'],
      \ ['right', 'left'], ['Right', 'Left'], ['RIGHT', 'LEFT'] ,
      \ ['next', 'previous'],
      \ ['first', 'last'],
      \ ['before', 'after'],
      \ ['enabled', 'disabled'],
      \ ]
<

There is also its buffer-local analogue *b:CtrlXA_Toggles*, which allows for
file-type specific keyword cycles by, for example

>
  autocmd FileType vim
              \ let b:CtrlXA_Toggles = [
              \ ['if', 'else', 'elseif', 'endif'],
              \ ] + g:CtrlXA_Toggles
  autocmd FileType sh
              \ let b:CtrlXA_Toggles = [
              \ ['if', 'elif', 'else', 'fi'],
              \ ] + g:CtrlXA_Toggles
  autocmd FileType tex
              \ let b:CtrlXA_Toggles = [
              \ ['final', 'draft'],
              \ ] + g:CtrlXA_Toggles
  autocmd FileType gitrebase if !exists('b:CtrlXA_Toggles') |
  \ let b:CtrlXA_Toggles = [
    \ ['pick', 'fixup', 'squash', 'reword', 'edit', 'drop'],
    \ ] + g:CtrlXA_Toggles | endif
<
