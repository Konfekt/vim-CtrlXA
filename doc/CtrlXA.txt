          CtrlXA, option toggling by Ctrl-X/A *CtrlXA* *ctrlxa*

===========================================================================
0. Introduction ~

This plug-in makes the key bindings `<Ctrl-X/A>` additionally cycle through
keywords in lists such as `true/false`, `yes/no`, `set/unset` or
`yesterday/today/tomorrow`. Useful, for example,

- for toggling settings in a configuration file, or
- for switching between `pick`, `squash`, `reword`, ... a `git` commit when
  rebasing.

===========================================================================
1. Configuration ~

These keywords cycles are configurable by the global variable
*g:CtrlXA_Toggles* which defaults to

>
  let g:CtrlXA_Toggles = [
      \ ['true', 'false'], ['True', 'False'], ['TRUE', 'FALSE'],
      \ ['yes', 'no'], ['Yes', 'No'], ['YES', 'NO'],
      \ ['on', 'off'], ['On', 'Off'], ['ON', 'OFF'],
      \ ['up', 'down'], ['Up', 'Down'] ,['UP', 'DOWN'],
      \ ['set', 'unset'],
      \ ['is', 'isnot'] ,
      \ ['+', '-'],
      \ ['==', '!='] , ['<', '>'], ['<=', '>='], ['=~', '!~'],
      \ ['enable', 'disable'], ['Enable', 'Disable'],
      \ ['enabled', 'disabled'], ['Enabled', 'Disabled'],
      \ ['maximum', 'minimum'], ['Maximum', 'Minimum'],
      \ ['maximal', 'minimal'], ['Maximal', 'Minimal'],
      \ ['maximize', 'minimize'], ['Maximize', 'Minimize'],
      \ ['upper', 'lower'], ['Upper', 'Lower'],
      \ ['top', 'bottom'], ['Top', 'Bottom'],
      \ ['above', 'below'], ['Above', 'Below'],
      \ ['forward', 'backward'], ['Forward', 'Backward'],
      \ ['right', 'middle', 'left'], ['Right', 'Middle', 'Left'],
      \ ['next', 'previous'], ['Next', 'Previous'],
      \ ['first', 'last'], ['First', 'Last'],
      \ ['before', 'after'], ['Before', 'After'],
      \ ['more', 'less'], ['More', 'Less'],
      \ ['fast', 'slow'], ['Fast', 'Slow'],
      \ ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'viii'],
      \ ['I', 'II', 'III', 'IV', 'V', 'VI', 'VIII'],
      \ ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],
      \ ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],
      \ ]
<

There is also its buffer-local analogue *b:CtrlXA_Toggles*, which allows for
file-type specific keyword cycles by, for example

>
  autocmd FileType vim
              \ let b:CtrlXA_Toggles = [
              \ ['if', 'else', 'elseif', 'endif'],
              \ ] + g:CtrlXA_Toggles
  autocmd FileType sh
              \ let b:CtrlXA_Toggles = [
              \ ['if', 'elif', 'else', 'fi'],
              \ ] + g:CtrlXA_Toggles
  autocmd FileType tex
              \ let b:CtrlXA_Toggles = [
              \ ['final', 'draft'],
              \ ] + g:CtrlXA_Toggles
  autocmd FileType gitrebase |
  \ let b:CtrlXA_Toggles = [
    \ ['pick', 'fixup', 'squash', 'break', 'reword', 'edit', 'drop'],
    \ ] + g:CtrlXA_Toggles
<

===========================================================================
2. FAQ ~

Q: Does this plugin integrate well with Tim Pope's vim-speeddating?
A: Yes, by adding to your `.vimrc` the lines

>
  nmap <Plug>SpeedDatingFallbackUp   <Plug>(CtrlXA-CtrlA)
  nmap <Plug>SpeedDatingFallbackDown <Plug>(CtrlXA-CtrlX)
<

